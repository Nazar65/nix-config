{
  inputs,
  lib,
  config,
  pkgs,
  ...
}: {

  nixpkgs = {
    # You can add overlays here
    overlays = [
      # If you want to use overlays exported from other flakes:
      # neovim-nightly-overlay.overlays.default

      # Or define it inline, for example:
      # (final: prev: {
      #   hi = final.hello.overrideAttrs (oldAttrs: {
      #     patches = [ ./change-hello-to-hi.patch ];
      #   });
      # })
    ];
    
    # Configure your nixpkgs instance
    config = {
      allowUnfree = true;
    };
  };

  environment.shells = with pkgs; [ zsh ];
  hardware.pulseaudio.enable = false;
  # better performance than the actual Intel driver
  services.xserver.videoDrivers = ["modesetting"];
  hardware.opengl.enable = true;
  hardware.opengl.extraPackages = [
    pkgs.intel-media-driver
    pkgs.vaapiIntel
    pkgs.vaapiVdpau
    pkgs.libvdpau-va-gl
  ];
  security.rtkit.enable = true;
  networking.networkmanager.enable = true;
  networking.extraHosts =
    ''
    127.0.0.1 burpee.local
    127.0.0.1 reinders.local
  '';
  # Set your time zone.
  time.timeZone = "Europe/Kyiv";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";
  i18n.supportedLocales = [
    "en_US.UTF-8/UTF-8"
    "uk_UA.UTF-8/UTF-8"
  ];

xdg.portal.extraPortals = [
    pkgs.xdg-desktop-portal-wlr # Backend for wayland roots
  ];
    services.xserver.enable = false;
  security.pam.services.swaylock = {};

  xdg.portal.wlr.enable = true;
services.greetd = {
    enable = true;
    settings = {
      default_session.command = "${pkgs.greetd.tuigreet}/bin/tuigreet --time --cmd ${pkgs.sway}/bin/sway";
      initial_session = {
        command = "sway -";
        user = "nazar";
      };
    };
  };
services.strongswan = {
    enable = true;
    secrets = [
      "ipsec.d/ipsec.nm-l2tp.secrets"
    ];
  };

  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
  };


  # This will add each flake input as a registry
  # To make nix3 commands consistent with your flake
  nix.registry = (lib.mapAttrs (_: flake: {inherit flake;})) ((lib.filterAttrs (_: lib.isType "flake")) inputs);

  # This will additionally add your inputs to the system's legacy channels
  # Making legacy nix commands consistent as well, awesome!
  nix.nixPath = ["/etc/nix/path"];
  environment.etc =
    lib.mapAttrs'
      (name: value: {
        name = "nix/path/${name}";
        value.source = value.flake;
      })
      config.nix.registry;

  nix.settings = {
    experimental-features = "nix-command flakes";
    auto-optimise-store = true;
  };

  programs.zsh.enable = true;
  
  users.users = {
    nazar = {
      shell = pkgs.zsh;
      isNormalUser = true;     
      extraGroups = ["networkmanager" "wheel"];
      packages = with pkgs; [
      mako
      swaylock
      wayland
      wl-clipboard
      xwayland
      home-manager
      ];
    };
  };
}
